/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package org.topcased.gpm.domain.accesscontrol;

/**
 * @author Atos
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "ACCESS_CONTROL")
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
@org.hibernate.annotations.Entity(dynamicInsert = false, dynamicUpdate = false)
@org.hibernate.annotations.Proxy(lazy = false)
@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE)
public class AccessControl implements java.io.Serializable,
        org.topcased.gpm.domain.PersistentObject {
    private static final long serialVersionUID = -7896468213451055368L;

    protected java.lang.String id;

    /**
     * Get the id
     * 
     * @return the id
     */
    @javax.persistence.Id
    @org.hibernate.annotations.GenericGenerator(name = "UUID_GEN", strategy = "org.topcased.gpm.domain.util.UuidGenerator")
    @javax.persistence.GeneratedValue(generator = "UUID_GEN")
    @javax.persistence.Column(name = "ID", length = 50, nullable = false, unique = false)
    @org.hibernate.annotations.Type(type = "java.lang.String")
    public java.lang.String getId() {
        return this.id;
    }

    public void setId(java.lang.String pId) {
        this.id = pId;
    }

    protected org.topcased.gpm.domain.fields.FieldsContainer typeControl;

    /**
     * 
     */
    @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.fields.FieldsContainer.class)
    @javax.persistence.JoinColumn(name = "TYPE_CONTROL_FK")
    @org.hibernate.annotations.ForeignKey(name = "ACCESS_CONTROL_TYPE_CONTROL_FK")
    @org.hibernate.annotations.Index(name = "type_control_fk_idx")
    public org.topcased.gpm.domain.fields.FieldsContainer getTypeControl() {
        return this.typeControl;
    }

    public void setTypeControl(
            org.topcased.gpm.domain.fields.FieldsContainer pTypeControl) {
        this.typeControl = pTypeControl;
    }

    protected org.topcased.gpm.domain.accesscontrol.Role roleControl;

    /**
     * Get the role
     * 
     * @return the role
     */
    @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.accesscontrol.Role.class)
    @javax.persistence.JoinColumn(name = "ROLE_CONTROL_FK")
    @org.hibernate.annotations.ForeignKey(name = "ACCESS_CONTROL_ROLE_CONTROL_FK")
    @org.hibernate.annotations.Index(name = "role_control_fk_idx")
    public org.topcased.gpm.domain.accesscontrol.Role getRoleControl() {
        return this.roleControl;
    }

    public void setRoleControl(
            org.topcased.gpm.domain.accesscontrol.Role pRoleControl) {
        this.roleControl = pRoleControl;
    }

    protected org.topcased.gpm.domain.product.Product productControl;

    /**
     * Get the product
     * 
     * @return the product
     */
    @javax.persistence.OneToOne(fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.product.Product.class)
    @javax.persistence.JoinColumn(name = "PRODUCT_CONTROL_FK")
    @org.hibernate.annotations.ForeignKey(name = "ACCESS_CONTROL_PRODUCT_CONTROL")
    @org.hibernate.annotations.Index(name = "product_control_fk_idx")
    public org.topcased.gpm.domain.product.Product getProductControl() {
        return this.productControl;
    }

    public void setProductControl(
            org.topcased.gpm.domain.product.Product pProductControl) {
        this.productControl = pProductControl;
    }

    protected org.topcased.gpm.domain.process.Node stateControl;

    /**
     * Get the state
     * 
     * @return the state
     */
    @javax.persistence.OneToOne(fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.process.Node.class)
    @javax.persistence.JoinColumn(name = "STATE_CONTROL_FK")
    @org.hibernate.annotations.ForeignKey(name = "ACCESS_CONTROL_STATE_CONTROL_F")
    public org.topcased.gpm.domain.process.Node getStateControl() {
        return this.stateControl;
    }

    public void setStateControl(
            org.topcased.gpm.domain.process.Node pStateControl) {
        this.stateControl = pStateControl;
    }

    protected org.topcased.gpm.domain.attributes.AttributesContainer extendedAttributes;

    /**
     * Get the extended attributes.
     * 
     * @return the extended attributes
     */
    @javax.persistence.OneToOne(cascade = { javax.persistence.CascadeType.ALL }, fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.attributes.AttributesContainer.class)
    @javax.persistence.JoinColumn(name = "EXTENDED_ATTRIBUTES_FK")
    @org.hibernate.annotations.ForeignKey(name = "ACCESS_CONTROL_EXTENDED_ATTRIB")
    public org.topcased.gpm.domain.attributes.AttributesContainer getExtendedAttributes() {
        return this.extendedAttributes;
    }

    public void setExtendedAttributes(
            org.topcased.gpm.domain.attributes.AttributesContainer pExtendedAttributes) {
        this.extendedAttributes = pExtendedAttributes;
    }

    /**
     * Returns <code>true</code> if the argument is an AccessControl instance
     * and all identifiers for this entity equal the identifiers of the argument
     * entity. Returns <code>false</code> otherwise.
     * 
     * @param pObject
     *            the object to compare with
     * @return a boolean
     */
    @javax.persistence.Transient
    public boolean equals(Object pObject) {
        if (this == pObject) {
            return true;
        }
        if (!(pObject instanceof AccessControl)) {
            return false;
        }
        final AccessControl lAccessControl = (AccessControl) pObject;
        if (this.getId() == null || lAccessControl.getId() == null
                || !lAccessControl.getId().equals(getId())) {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     * 
     * @return a hash code value for this object.
     * @see java.lang.Object#hashCode()
     */
    @javax.persistence.Transient
    public int hashCode() {
        int lHashCode = 0;
        if (id != null) {
            lHashCode = id.hashCode();
        }
        return lHashCode;
    }

}
