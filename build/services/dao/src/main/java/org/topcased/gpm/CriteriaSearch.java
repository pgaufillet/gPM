/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearch.vsl in andromda-spring-cartridge.
//
package org.topcased.gpm;

import org.hibernate.Criteria;

/**
 * Implements a generic search mechanism based on the Hibernate Criteria API.
 * The <code>CriteriaSearch</code> allows adding parameters which function as
 * where clause. The parameters are analysed whether they should be considered
 * or not. This depends both on the actual value of the parameter and on the
 * configuration.<br>
 * The <code>CriteriaSearch</code> is expected to be a general solution for a
 * basic search with parameters connected by logical <b>and</b>. This search
 * does <b>not</b> provide grouping.
 * 
 * @author Stefan Reichert
 * @author Peter Friese
 * @author Chad Brandon
 * @see org.hibernate.Criteria
 * @see org.hibernate.criterion.Expression
 */
public class CriteriaSearch {
    private CriteriaSearchConfiguration configuration;

    private org.hibernate.Criteria rootCriteria;

    private java.util.Map<String, Criteria> childCriteriaMap;

    private java.util.List<CriteriaSearchParameter> orderList;

    @SuppressWarnings("rawtypes")
    private Class resultType;

    @SuppressWarnings("rawtypes")
    private static final class ParameterComparator implements
            java.util.Comparator {
        public int compare(final Object pObject1, final Object pObject2) {
            final CriteriaSearchParameter lParameter1 =
                    (CriteriaSearchParameter) pObject1;
            final CriteriaSearchParameter lParameter2 =
                    (CriteriaSearchParameter) pObject2;

            final int lRelevance1 = lParameter1.getOrderRelevance();
            final int lRelevance2 = lParameter2.getOrderRelevance();
            int lResult = 0;
            if (lRelevance1 > lRelevance2) {
                lResult = 1;
            }
            else if (lRelevance1 < lRelevance2) {
                lResult = -1;
            }
            return lResult;

        }
    }

    /**
     * Constructor for CriteriaSearch. Creates a <code>CriteriaSearch</code>
     * with a default <code>CriteriaSearchConfiguration</code>.
     * 
     * @param pSession
     *            The Hibernate session.
     * @param pResultType
     *            The <code>Class</code> of the result.
     */
    @SuppressWarnings("rawtypes")
    public CriteriaSearch(org.hibernate.Session pSession, Class pResultType) {
        this.configuration = new CriteriaSearchConfiguration();
        this.resultType = pResultType;
        this.rootCriteria = pSession.createCriteria(this.resultType);
        this.childCriteriaMap = new java.util.HashMap<String, Criteria>();
        this.orderList = new java.util.ArrayList<CriteriaSearchParameter>();
    }

    /**
     * Executes a <code>HibernateQuery</code> using the currently defined
     * <code>CriteriaSearchParameter</code>s, and returns a java.util.Set
     * containing the query results.
     * 
     * @return result The result of the query.
     * @throws org.hibernate.HibernateException
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public final java.util.Set executeAsSet()
        throws org.hibernate.HibernateException {
        // add ordering
        if (this.orderList.size() > 0) {
            java.util.Collections.sort(this.orderList,
                    new ParameterComparator());
            for (java.util.Iterator<CriteriaSearchParameter> lOrderIterator = this.orderList.iterator(); lOrderIterator.hasNext();) {
                CriteriaSearchParameter lParameter =
                        lOrderIterator.next();
                int lDirection = lParameter.getOrderDirection();
                if (lDirection == CriteriaSearchParameter.ORDER_ASC) {
                    this.rootCriteria.addOrder(org.hibernate.criterion.Order.asc(lParameter.getParameterPattern()));
                }
                else {
                    this.rootCriteria.addOrder(org.hibernate.criterion.Order.desc(lParameter.getParameterPattern()));
                }
            }
        }

        // set the first result if configured
        if (this.configuration.getFirstResult() != null) {
            this.rootCriteria.setFirstResult(this.configuration.getFirstResult().intValue());
        }

        // set the fetch size if configured
        if (this.configuration.getFetchSize() != null) {
            this.rootCriteria.setFetchSize(this.configuration.getFetchSize().intValue());
        }

        // limit the maximum result if configured
        if (this.configuration.getMaximumResultSize() != null) {
            this.rootCriteria.setMaxResults(this.configuration.getMaximumResultSize().intValue());
        }

        // Hibernate does not support a 'unique' identifier. As a search may contain outer joins,
        // duplicates in the resultList are possible. We eliminate any duplicates here, creating a
        // distinctified resultSet (Suggestion from Hibernate itself; see www.hibernate.org's FAQ's).
        return new java.util.LinkedHashSet(this.rootCriteria.list());
    }

    /**
     * Executes a <code>HibernateQuery</code> using the currently defined
     * <code>CriteriaSearchParameter</code>s, and returns a java.util.List
     * containing the query results.
     * 
     * @return result The result of the query.
     * @throws org.hibernate.HibernateException
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public java.util.List executeAsList()
        throws org.hibernate.HibernateException {
        return new java.util.ArrayList(this.executeAsSet());
    }

    /**
     * Adds a <code>CriteriaSearchParameter</code> to this search. The parameter
     * is connected to the search by logical <b>and</b>. It is not considered if
     * the value is <code>null</code>. If the value is not <code>null</code> it
     * is compared using the
     * <code>CriteriaSearchParameter.EQUALS_COMPARATOR</code>.
     * 
     * @param pParameterValue
     *            The value of the parameter.
     * @param pParameterPattern
     *            The pattern of the parameter (dot-seperated path e.g.
     *            person.address.street).
     * @throws org.hibernate.HibernateException
     */
    public void addParameter(Object pParameterValue, String pParameterPattern)
        throws org.hibernate.HibernateException {
        addParameter(new CriteriaSearchParameter(pParameterValue,
                pParameterPattern));
    }

    /**
     * Adds a <code>CriteriaSearchParameter</code> to this search. The parameter
     * is connected to the search by logical <b>and</b>. It is not considered if
     * the value is <code>null</code> or if the <code>String</code> empty. If
     * the value is not <code>null</code> it is compared using the
     * <code>CriteriaSearchParameter.LIKE_COMPARATOR</code>.
     * 
     * @param pParameterValue
     *            The value of the parameter.
     * @param pParameterPattern
     *            The pattern of the parameter (dot-seperated path e.g.
     *            person.address.street).
     * @throws org.hibernate.HibernateException
     */
    public void addParameter(String pParameterValue, String pParameterPattern)
        throws org.hibernate.HibernateException {
        addParameter(new CriteriaSearchParameter(pParameterValue,
                pParameterPattern));
    }

    /**
     * Adds a <code>CriteriaSearchParameter</code> to this search. The parameter
     * is connected to the search by logical <b>and</b>.
     * 
     * @param pParameter
     *            The <code>CriteriaSearchParameter</code> to add.
     * @throws org.hibernate.HibernateException
     */
    @SuppressWarnings("rawtypes")
    public void addParameter(CriteriaSearchParameter pParameter)
        throws org.hibernate.HibernateException {
        if (considerParameter(pParameter)) {
            // parsing the pattern of the parameter
            String[] lPath =
                    CriteriaSearchParameter.PATTERN.split(pParameter.getParameterPattern());
            String lParameterName = lPath[lPath.length - 1];
            org.hibernate.Criteria lParameterCriteria = this.rootCriteria;

            org.hibernate.Criteria lChildEntityCriteria;
            if (lPath.length > 1) {
                // We have a parameter affecting an attribute of an inner childEntity object so we need
                // to traverse to get the right criteria object
                lChildEntityCriteria = this.rootCriteria;
                // Evaluating the proper criteria object for the defined parameter
                Class lType = this.resultType;
                for (int i = 0; i < (lPath.length - 1); i++) {
                    final String lChildEntityName = lPath[i];
                    final java.util.Collection lEmbeddedValues =
                            CriteriaSearchProperties.getEmbeddedValues(lType);
                    if (lEmbeddedValues != null
                            && lEmbeddedValues.contains(lChildEntityName)) {
                        // - use the rest of the path as the parameter name
                        final int lNumber = lPath.length - i;
                        final String[] lRestOfPath =
                                new String[lPath.length - i];
                        java.lang.System.arraycopy(lPath, i, lRestOfPath, 0,
                                lNumber);
                        lParameterName =
                                org.apache.commons.lang.StringUtils.join(
                                        lRestOfPath, ".");
                        break;
                    }
                    lType =
                            CriteriaSearchProperties.getNavigableAssociationEndType(
                                    lType, lChildEntityName);
                    lChildEntityCriteria =
                            locateCriteria(lChildEntityName,
                                    lChildEntityCriteria);
                }
                if (lChildEntityCriteria != null) {
                    // We now have the right criteria object
                    lParameterCriteria = lChildEntityCriteria;
                }
            }
            // check the type parameter value to add
            if (pParameter.getParameterValue() instanceof Object[]) {
                addExpression(lParameterCriteria, lParameterName,
                        (Object[]) pParameter.getParameterValue(),
                        pParameter.getComparatorID(), pParameter.getMatchMode());
            }
            else {
                addExpression(lParameterCriteria, lParameterName,
                        pParameter.getParameterValue(),
                        pParameter.getComparatorID(), pParameter.getMatchMode());
            }
        }
        // if the parameter is to be ordered, add it to the order list
        if (pParameter.getOrderDirection() != CriteriaSearchParameter.ORDER_UNSET) {
            this.orderList.add(pParameter);
        }
    }

    /**
     * Decides whether a paramter is considered as a criteria for a search
     * depending on the type and value of the <code>parameterValue</code> and
     * <code>searchIfIsNull</code>. A <code>parameterValue</code> of the type
     * <code>String</code> is considered <code>null</code> if being a
     * <code>NullPointer</code> or empty.
     * 
     * @param pParameter
     *            The parameter to check.
     */
    private boolean considerParameter(CriteriaSearchParameter pParameter) {
        if (pParameter.getParameterValue() instanceof String) {
            String lStringParameterValue =
                    (String) pParameter.getParameterValue();
            return (pParameter.isSearchIfIsNull() || (lStringParameterValue != null && lStringParameterValue.length() > 0));
        }
        if (pParameter.getParameterValue() instanceof Object[]) {
            Object[] lParameterValues =
                    (Object[]) pParameter.getParameterValue();
            return (pParameter.isSearchIfIsNull() || (lParameterValues != null && lParameterValues.length > 0));
        }
        return (pParameter.isSearchIfIsNull() || (pParameter.getParameterValue() != null));
    }

    /**
     * Adds an <code>Expression</code> to a <code>Criteria</code>.
     * 
     * @param pCriteria
     * @param pParameterName
     * @param pParameterValue
     * @param pComparatorID
     * @param pMatchMode
     */
    @SuppressWarnings("rawtypes")
    private void addExpression(org.hibernate.Criteria pCriteria,
            String pParameterName, Object pParameterValue, int pComparatorID,
            org.hibernate.criterion.MatchMode pMatchMode) {
        if (pParameterValue != null) {
            switch (pComparatorID) {
                case CriteriaSearchParameter.LIKE_COMPARATOR: {
                    if ((pMatchMode != null)
                            && (pParameterValue instanceof String)) {
                        pCriteria.add(org.hibernate.criterion.Expression.like(
                                pParameterName, (String) pParameterValue,
                                pMatchMode));
                    }
                    else {
                        pCriteria.add(org.hibernate.criterion.Expression.like(
                                pParameterName, pParameterValue));
                    }
                    break;
                }
                case CriteriaSearchParameter.INSENSITIVE_LIKE_COMPARATOR: {
                    if ((pMatchMode != null)
                            && (pParameterValue instanceof String)) {
                        pCriteria.add(org.hibernate.criterion.Expression.ilike(
                                pParameterName, (String) pParameterValue,
                                pMatchMode));
                    }
                    else {
                        pCriteria.add(org.hibernate.criterion.Expression.ilike(
                                pParameterName, pParameterValue));
                    }
                    break;
                }
                case CriteriaSearchParameter.EQUAL_COMPARATOR: {
                    pCriteria.add(org.hibernate.criterion.Expression.eq(
                            pParameterName, pParameterValue));
                    break;
                }
                case CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR: {
                    pCriteria.add(org.hibernate.criterion.Expression.ge(
                            pParameterName, pParameterValue));
                    break;
                }
                case CriteriaSearchParameter.GREATER_THAN_COMPARATOR: {
                    pCriteria.add(org.hibernate.criterion.Expression.gt(
                            pParameterName, pParameterValue));
                    break;
                }
                case CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR: {
                    pCriteria.add(org.hibernate.criterion.Expression.le(
                            pParameterName, pParameterValue));
                    break;
                }
                case CriteriaSearchParameter.LESS_THAN_COMPARATOR: {
                    pCriteria.add(org.hibernate.criterion.Expression.lt(
                            pParameterName, pParameterValue));
                    break;
                }
                case CriteriaSearchParameter.IN_COMPARATOR: {
                    if (pParameterValue instanceof java.util.Collection) {
                        pCriteria.add(org.hibernate.criterion.Expression.in(
                                pParameterName,
                                (java.util.Collection) pParameterValue));
                    }
                    break;
                }
                case CriteriaSearchParameter.NOT_EQUAL_COMPARATOR: {
                    pCriteria.add(org.hibernate.criterion.Expression.ne(
                            pParameterName, pParameterValue));
                    break;
                }
                default:
                    break;
            }
        }
        else {
            pCriteria.add(org.hibernate.criterion.Expression.isNull(pParameterName));
        }

    }

    /**
     * Adds an <code>Expression</code> to a <code>Criteria</code>. The given
     * <code>parameterValues</code> represents either an array of
     * <code>String</code> or another object. The different values in the array
     * are added to a disjunction or conjuction which is connected with logical
     * and to the other criteria of the search.
     * 
     * @param pCriteria
     * @param pParameterName
     * @param pParameterValues
     * @param searchIfNull
     * @param pComparatorID
     * @param pMatchMode
     */
    private void addExpression(org.hibernate.Criteria pCriteria,
            String pParameterName, Object[] pParameterValues,
            int pComparatorID, org.hibernate.criterion.MatchMode pMatchMode) {
        if (pParameterValues != null) {
            org.hibernate.criterion.Disjunction lDisjunction = null;
            org.hibernate.criterion.Conjunction lConjunction = null;
            switch (pComparatorID) {
                case CriteriaSearchParameter.LIKE_COMPARATOR: {
                    lDisjunction =
                            org.hibernate.criterion.Restrictions.disjunction();
                    if ((pMatchMode != null)
                            && (pParameterValues instanceof String[])) {
                        String[] lStringParameterValues =
                                (String[]) pParameterValues;
                        for (int i = 0; i < pParameterValues.length; i++) {
                            if (lStringParameterValues[i] != null) {
                                lDisjunction.add(org.hibernate.criterion.Expression.like(
                                        pParameterName,
                                        lStringParameterValues[i], pMatchMode));
                            }
                            else {
                                lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                            }
                        }
                    }
                    else {
                        for (int i = 0; i < pParameterValues.length; i++) {
                            if (pParameterValues[i] != null) {
                                lDisjunction.add(org.hibernate.criterion.Expression.like(
                                        pParameterName, pParameterValues[i]));
                            }
                            else {
                                lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                            }
                        }
                    }
                    break;
                }
                case CriteriaSearchParameter.INSENSITIVE_LIKE_COMPARATOR: {
                    lDisjunction =
                            org.hibernate.criterion.Restrictions.disjunction();
                    if ((pMatchMode != null)
                            && (pParameterValues instanceof String[])) {
                        String[] lStringParameterValues =
                                (String[]) pParameterValues;
                        for (int i = 0; i < pParameterValues.length; i++) {
                            if (lStringParameterValues[i] != null) {
                                lDisjunction.add(org.hibernate.criterion.Expression.ilike(
                                        pParameterName,
                                        lStringParameterValues[i], pMatchMode));
                            }
                            else {
                                lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                            }
                        }
                    }
                    else {
                        for (int i = 0; i < pParameterValues.length; i++) {
                            if (pParameterValues[i] != null) {
                                lDisjunction.add(org.hibernate.criterion.Expression.ilike(
                                        pParameterName, pParameterValues[i]));
                            }
                            else {
                                lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                            }
                        }
                    }
                    break;
                }
                case CriteriaSearchParameter.EQUAL_COMPARATOR: {
                    lDisjunction =
                            org.hibernate.criterion.Restrictions.disjunction();
                    for (int i = 0; i < pParameterValues.length; i++) {
                        if (pParameterValues[i] != null) {
                            lDisjunction.add(org.hibernate.criterion.Expression.eq(
                                    pParameterName, pParameterValues[i]));
                        }
                        else {
                            lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                        }
                    }
                    break;
                }
                case CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR: {
                    lDisjunction =
                            org.hibernate.criterion.Restrictions.disjunction();
                    for (int i = 0; i < pParameterValues.length; i++) {
                        if (pParameterValues[i] != null) {
                            lDisjunction.add(org.hibernate.criterion.Expression.ge(
                                    pParameterName, pParameterValues[i]));
                        }
                        else {
                            lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                        }
                    }
                    break;
                }
                case CriteriaSearchParameter.GREATER_THAN_COMPARATOR: {
                    lDisjunction =
                            org.hibernate.criterion.Restrictions.disjunction();
                    for (int i = 0; i < pParameterValues.length; i++) {
                        if (pParameterValues[i] != null) {
                            lDisjunction.add(org.hibernate.criterion.Expression.gt(
                                    pParameterName, pParameterValues[i]));
                        }
                        else {
                            lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                        }
                    }
                    break;
                }
                case CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR: {
                    lDisjunction =
                            org.hibernate.criterion.Restrictions.disjunction();
                    for (int i = 0; i < pParameterValues.length; i++) {
                        if (pParameterValues[i] != null) {
                            lDisjunction.add(org.hibernate.criterion.Expression.le(
                                    pParameterName, pParameterValues[i]));
                        }
                        else {
                            lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                        }
                    }
                    break;
                }
                case CriteriaSearchParameter.LESS_THAN_COMPARATOR: {
                    lDisjunction =
                            org.hibernate.criterion.Restrictions.disjunction();
                    for (int i = 0; i < pParameterValues.length; i++) {
                        if (pParameterValues[i] != null) {
                            lDisjunction.add(org.hibernate.criterion.Expression.lt(
                                    pParameterName, pParameterValues[i]));
                        }
                        else {
                            lDisjunction.add(org.hibernate.criterion.Expression.isNull(pParameterName));
                        }
                    }
                    break;
                }
                case CriteriaSearchParameter.IN_COMPARATOR: {
                    pCriteria.add(org.hibernate.criterion.Expression.in(
                            pParameterName, pParameterValues));
                    break;
                }
                case CriteriaSearchParameter.NOT_EQUAL_COMPARATOR: {
                    lConjunction =
                            org.hibernate.criterion.Restrictions.conjunction();
                    for (int i = 0; i < pParameterValues.length; i++) {
                        if (pParameterValues[i] != null) {
                            lConjunction.add(org.hibernate.criterion.Expression.ne(
                                    pParameterName, pParameterValues[i]));
                        }
                        else {
                            lConjunction.add(org.hibernate.criterion.Expression.isNotNull(pParameterName));
                        }
                    }
                    break;
                }
                default:
                    break;
            }

            if (lDisjunction != null) {
                pCriteria.add(lDisjunction);
            }
            if (lConjunction != null) {
                pCriteria.add(lConjunction);
            }
        }
        else {
            pCriteria.add(org.hibernate.criterion.Expression.isNull(pParameterName));
        }
    }

    /**
     * Locates a <code>Criteria</code> for a <code>childEntityName</code>. If a
     * <code>Criteria</code> exists for the <code>childEntityName</code>, it is
     * returned. If not, one is created and referenced in the
     * <code>childCriteriaMap</code> under the <code>childEntityName</code>.
     * 
     * @param pChildEntityName
     * @param pParentCriteria
     * @return criteria The Criteria for the childEntityName.
     * @throws org.hibernate.HibernateException
     */
    private org.hibernate.Criteria locateCriteria(String pChildEntityName,
            org.hibernate.Criteria pParentCriteria)
        throws org.hibernate.HibernateException {
        if (this.childCriteriaMap.containsKey(pChildEntityName)) {
            return this.childCriteriaMap.get(pChildEntityName);
        }
        org.hibernate.Criteria lChildCriteria =
                pParentCriteria.createCriteria(pChildEntityName);
        if (this.configuration.isForceEagerLoading()) {
            pParentCriteria.setFetchMode(pChildEntityName,
                    org.hibernate.FetchMode.JOIN);
        }
        this.childCriteriaMap.put(pChildEntityName, lChildCriteria);
        return lChildCriteria;
    }

    /**
     * Returns the configuration of this search.
     * 
     * @return configuration
     */
    public CriteriaSearchConfiguration getConfiguration() {
        return this.configuration;
    }
}