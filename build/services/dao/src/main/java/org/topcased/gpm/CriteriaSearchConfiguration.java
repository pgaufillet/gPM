/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearchConfiguration.vsl in andromda-spring-cartridge.
//
package org.topcased.gpm;

/**
 * Contains configuration parameters for a <code>CriteriaSearch</code>.
 * 
 * @author Stefan Reichert
 * @author Peter Friese
 */
public class CriteriaSearchConfiguration {
    /**
     * Constructs a new CriteriaSearchConfiguration instance with all fields set
     * to either <code>null</code> or <code>false</code>.
     */
    public CriteriaSearchConfiguration() {
        this.forceEagerLoading = false;
        this.firstResult = null;
        this.fetchSize = null;
        this.maximumResultSize = null;
    }

    /**
     * If a parameter refers to a childEntity and <code>forceEagerLoading</code>
     * is <code>true</code>, the childEntity is always loaded. If
     * <code>forceEagerLoading</code> is <code>false</code>, the loading depends
     * on the persister-configuration of the parentEntity.
     */
    private boolean forceEagerLoading;

    /**
     * Returns whether or not eager loading is enabled.
     * 
     * @return <code>true</code> if eager loading is enabled, <code>false</code>
     *         otherwise
     */
    public boolean isForceEagerLoading() {
        return forceEagerLoading;
    }

    /**
     * Sets whether or not eager loading is to be enabled.
     * 
     * @param pForceEagerLoading
     *            <code>true</code> if eager loading is to be enabled,
     *            <code>false</code> otherwise
     */
    public void setForceEagerLoading(boolean pForceEagerLoading) {
        this.forceEagerLoading = pForceEagerLoading;
    }

    /**
     * The first result to retrieve.
     */
    private java.lang.Integer firstResult;

    /**
     * Gets the first result to retrieve.
     * 
     * @return the first result to retrieve
     */
    public java.lang.Integer getFirstResult() {
        return this.firstResult;
    }

    /**
     * Sets the first result to retrieve.
     * 
     * @param pFirstResult
     *            the first result to retrieve
     */
    public void setFirstResult(java.lang.Integer pFirstResult) {
        this.firstResult = pFirstResult;
    }

    /**
     * The fetch size.
     */
    private java.lang.Integer fetchSize;

    /**
     * Gets the fetch size.
     * 
     * @return the fetch size
     */
    public java.lang.Integer getFetchSize() {
        return this.fetchSize;
    }

    /**
     * Sets the fetch size.
     * 
     * @param pFetchSize
     *            the fetch size
     */
    public void setFetchSize(java.lang.Integer pFetchSize) {
        this.fetchSize = pFetchSize;
    }

    /**
     * If <code>maximumResultSize</code> is not <code>null</code> it limits the
     * maximum size of the resultList.
     */
    private java.lang.Integer maximumResultSize;

    /**
     * Gets the maximum size of the search result.
     * 
     * @return the maximum size of the search result.
     */
    public java.lang.Integer getMaximumResultSize() {
        return this.maximumResultSize;
    }

    /**
     * Sets the maxmimum size of the result.
     * 
     * @param pMaximumResultSize
     *            A number indicating how many results will be returned.
     */
    public void setMaximumResultSize(java.lang.Integer pMaximumResultSize) {
        this.maximumResultSize = pMaximumResultSize;
    }
}