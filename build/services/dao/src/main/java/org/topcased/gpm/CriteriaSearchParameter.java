/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearchParameter.vsl in andromda-spring-cartridge.
//
package org.topcased.gpm;

import java.util.regex.Pattern;

/**
 * A <code>CriteriaSearchParameter</code> represents a parameter for a
 * <code>CriteriaSearch</code>. <br>
 * <br>
 * The <code>parameterValue</code> is the actual value to be searched for. <br>
 * <br>
 * The <code>parameterPattern</code> describes the actual parameter which shall
 * be considered for the search. It contains the dot-seperated path and the name
 * of the parameter starting at the rootEntity of the actual
 * <code>CriteriaSearch</code>. The pattern of a the street of an address of a
 * person would look like <i>address.street </i> (assuming the entity structure
 * to be <code>aPerson.getAddress().getStreet()</code>). <br>
 * <br>
 * Usually, if a parameter is <code>null</code> (or if the parameter is of type
 * <code>String</code> and empty), it is not considered for a search. If
 * <code>searchIfIsNull</code> is <code>true</code> it is explicitly searched
 * for the parameter to be null (or empty if the parameter is of type
 * <code>String</code>).<br>
 * <br>
 * The <code>comparatorID</code> defines the comparator for the parameter. For
 * parameters of type <code>String</code> the default comparator is the
 * <code>LIKE_COMPARATOR</code>. The <code>EQUAL_COMPARATOR</code> is default
 * for other parameters.
 * 
 * @author Stefan Reichert
 * @author Peter Friese
 */
public class CriteriaSearchParameter {

    public static final Pattern PATTERN = Pattern.compile("\\.");

    public static final int LIKE_COMPARATOR = 0;

    public static final int INSENSITIVE_LIKE_COMPARATOR = 1;

    public static final int EQUAL_COMPARATOR = 2;

    public static final int GREATER_THAN_OR_EQUAL_COMPARATOR = 3;

    public static final int GREATER_THAN_COMPARATOR = 4;

    public static final int LESS_THAN_OR_EQUAL_COMPARATOR = 5;

    public static final int LESS_THAN_COMPARATOR = 6;

    public static final int IN_COMPARATOR = 7;

    public static final int NOT_EQUAL_COMPARATOR = 8;

    /** Order unset */
    public static final int ORDER_UNSET = -1;

    /** Ascending order */
    public static final int ORDER_ASC = 0;

    /** Descending order */
    public static final int ORDER_DESC = 1;

    /** Order relevance not set */
    public static final int RELEVANCE_UNSET = -1;

    private Object parameterValue;

    private String parameterPattern;

    private boolean searchIfIsNull = false;

    private org.hibernate.criterion.MatchMode matchMode = null;

    private int comparatorID = CriteriaSearchParameter.EQUAL_COMPARATOR;

    private int orderDirection = ORDER_UNSET;

    private int orderRelevance = RELEVANCE_UNSET;

    /**
     * Constructor for CriteriaSearchParameter. Sets <code>searchIfIsNull</code>
     * to <code>false</code> and uses the <code>EQUAL_COMPARATOR</code>.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     */
    public CriteriaSearchParameter(Object pParameterValue,
            String pParameterPattern) {
        this(pParameterValue, pParameterPattern, false, EQUAL_COMPARATOR);
    }

    /**
     * Constructor for CriteriaSearchParameter for a <code>String</code>
     * parameter. Sets <code>searchIfIsNull</code> to <code>false</code> and
     * uses the <code>LIKE_COMPARATOR</code>.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     */
    public CriteriaSearchParameter(String pParameterValue,
            String pParameterPattern) {
        this(pParameterValue, pParameterPattern, false, LIKE_COMPARATOR);
    }

    /**
     * Constructor for CriteriaSearchParameter for a <code>String[]</code>
     * parameter. Sets <code>searchIfIsNull</code> to <code>false</code> and
     * uses the <code>LIKE_COMPARATOR</code>.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     */
    public CriteriaSearchParameter(String[] pParameterValue,
            String pParameterPattern) {
        this(pParameterValue, pParameterPattern, false, LIKE_COMPARATOR);
    }

    /**
     * Constructor for CriteriaSearchParameter. Sets <code>searchIfIsNull</code>
     * to <code>false</code>.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     */
    public CriteriaSearchParameter(Object pParameterValue,
            String pParameterPattern, int pComparatorID) {
        this(pParameterValue, pParameterPattern, false, pComparatorID);
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     */
    public CriteriaSearchParameter(Object pParameterValue,
            String pParameterPattern, boolean pSearchIfNull) {
        this(pParameterValue, pParameterPattern, pSearchIfNull,
                EQUAL_COMPARATOR);
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     */
    public CriteriaSearchParameter(String pParameterValue,
            String pParameterPattern, boolean pSearchIfNull) {
        this(pParameterValue, pParameterPattern, pSearchIfNull, LIKE_COMPARATOR);
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     */
    public CriteriaSearchParameter(String[] pParameterValue,
            String pParameterPattern, boolean pSearchIfNull) {
        this(pParameterValue, pParameterPattern, pSearchIfNull, LIKE_COMPARATOR);
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     * @param pComparatorID
     *            Indicates what comparator is to be used (e.g. like, =, <,
     *            ...).
     */
    public CriteriaSearchParameter(Object pParameterValue,
            String pParameterPattern, boolean pSearchIfNull, int pComparatorID) {
        super();
        this.parameterValue = pParameterValue;
        this.parameterPattern = pParameterPattern;
        this.searchIfIsNull = pSearchIfNull;
        this.comparatorID = pComparatorID;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(Object pParameterValue,
            String pParameterPattern, boolean pSearchIfNull,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern, pSearchIfNull);
        this.matchMode = pMatchMode;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(String pParameterValue,
            String pParameterPattern, boolean pSearchIfNull,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern, pSearchIfNull);
        this.matchMode = pMatchMode;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(String[] pParameterValue,
            String pParameterPattern, boolean pSearchIfNull,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern, pSearchIfNull);
        this.matchMode = pMatchMode;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pSearchIfNull
     *            Indicates whether the query should contain an
     *            <code>IS NULL</code> if the parameter is <code>null</code>.
     * @param pComparatorID
     *            Indicates what comparator is to be used (e.g. like, =, <,
     *            ...).
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(String pParameterValue,
            String pParameterPattern, boolean pSearchIfNull, int pComparatorID,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern, pSearchIfNull, pComparatorID);
        this.matchMode = pMatchMode;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pComparatorID
     *            Indicates what comparator is to be used (e.g. like, =, <,
     *            ...).
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(Object pParameterValue,
            String pParameterPattern, int pComparatorID,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern, pComparatorID);
        this.matchMode = pMatchMode;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(Object pParameterValue,
            String pParameterPattern,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern);
        this.matchMode = pMatchMode;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(String pParameterValue,
            String pParameterPattern,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern);
        this.matchMode = pMatchMode;
    }

    /**
     * Constructor for CriteriaSearchParameter.
     * 
     * @param pParameterValue
     *            The actual value of the parameter.
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     * @param pMatchMode
     *            The hibernate matchmode to be used in string comparisons.
     */
    public CriteriaSearchParameter(String[] pParameterValue,
            String pParameterPattern,
            org.hibernate.criterion.MatchMode pMatchMode) {
        this(pParameterValue, pParameterPattern);
        this.matchMode = pMatchMode;
    }

    /**
     * @return The comparator to be used (e.g. like, =, <, ...).
     */
    public int getComparatorID() {
        return comparatorID;
    }

    /**
     * Sets the comparator to be used (e.g. like, =, <, ...).
     * 
     * @param pComparatorID
     *            The comprator ID.
     */
    public void setComparatorID(int pComparatorID) {
        this.comparatorID = pComparatorID;
    }

    /**
     * @return The pattern of this parameter (dot-seperated path e.g.
     *         person.address.street).
     */
    public String getParameterPattern() {
        return parameterPattern;
    }

    /**
     * Sets the pattern of this parameter.
     * 
     * @param pParameterPattern
     *            The pattern of this parameter (dot-seperated path e.g.
     *            person.address.street).
     */
    public void setParameterPattern(String pParameterPattern) {
        this.parameterPattern = pParameterPattern;
    }

    /**
     * Parse the parameter pattern and return the last part of the name.
     * 
     * @param pParameterPattern
     *            The parameter pattern.
     * @return The last part of the parameter pattern, i.e. the attribute name.
     */
    private String parseParameterName(String pParameterPattern) {
        // parsing the pattern of the parameter
        String[] lPath =
                CriteriaSearchParameter.PATTERN.split(pParameterPattern);
        return lPath[lPath.length - 1];
    }

    /**
     * @return The last part of the parameter pattern, i.e. the attribute name.
     */
    public String getParameterName() {
        return parseParameterName(parameterPattern);
    }

    /**
     * @return The value of this parameter.
     */
    public Object getParameterValue() {
        return parameterValue;
    }

    /**
     * Sets the value of this parameter.
     * 
     * @param pParameterValue
     *            The value of this parameter.
     */
    public void setParameterValue(Object pParameterValue) {
        this.parameterValue = pParameterValue;
    }

    /**
     * @return Whether this parameter will be included in the search even if it
     *         is <code>null</code>.
     */
    public boolean isSearchIfIsNull() {
        return searchIfIsNull;
    }

    /**
     * Defines whether parameter will be included in the search even if it is
     * <code>null</code>.
     * 
     * @param pSearchIfNull
     *            <code>true</code> if the parameter should be included in the
     *            search even if it is null, <code>false</code> otherwise.
     */
    public void setSearchIfIsNull(boolean pSearchIfNull) {
        this.searchIfIsNull = pSearchIfNull;
    }

    /**
     * @return The hibernate matchmode of this parameter.
     */
    public org.hibernate.criterion.MatchMode getMatchMode() {
        return matchMode;
    }

    /**
     * Sets the hibernate matchmode of this parameter.
     * 
     * @param pMatchMode
     *            The hibernate matchmode.
     */
    public void setMatchMode(org.hibernate.criterion.MatchMode pMatchMode) {
        this.matchMode = pMatchMode;
    }

    /**
     * @return The order (ascending or descending) for this parameter.
     * @see ORDER_ASC
     * @see ORDER_DESC
     * @see ORDER_UNSET
     */
    public int getOrderDirection() {
        return orderDirection;
    }

    /**
     * Sets the ordering for this parameter.
     * 
     * @param pOrderDirection
     *            The ordering for this parameter.
     */
    public void setOrderDirection(int pOrderDirection) {
        this.orderDirection = pOrderDirection;
    }

    /**
     * @return The relevance for this parameter.
     * @see RELEVANCE_UNSET
     */
    public int getOrderRelevance() {
        return orderRelevance;
    }

    /**
     * Sets the ordering relevance for this parameter.
     * 
     * @param pRelevance
     *            The ordering relevance for this parameter.
     */
    public void setOrderRelevance(int pRelevance) {
        this.orderRelevance = pRelevance;
    }

}
