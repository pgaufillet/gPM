/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package org.topcased.gpm.domain.fields;

import java.util.ArrayList;
import java.util.Collection;

import javax.persistence.Transient;

import org.topcased.gpm.domain.util.IdentityFieldVisitor;

/**
 * <p>
 * Specific field chose value must be controlled by the dictionnary.
 * 
 * @author Atos
 *         </p>
 */
@javax.persistence.Entity
@javax.persistence.Table(name = "MULTIPLE_FIELD")
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
@org.hibernate.annotations.Entity(dynamicInsert = false, dynamicUpdate = false)
@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE)
public class MultipleField extends org.topcased.gpm.domain.fields.Field {
    private static final long serialVersionUID = 2623419004882720380L;

    protected java.lang.String fieldSeparator;

    @Transient
    private Collection<Field> actualSubfields;

    /**
     * 
     */
    @javax.persistence.Column(name = "FIELD_SEPARATOR", length = 50, nullable = false, unique = false)
    @org.hibernate.annotations.Type(type = "java.lang.String")
    public java.lang.String getFieldSeparator() {
        return this.fieldSeparator;
    }

    public void setFieldSeparator(java.lang.String pFieldSeparator) {
        this.fieldSeparator = pFieldSeparator;
    }

    protected java.lang.String id;

    /**
     * 
     */

    protected java.util.List<org.topcased.gpm.domain.fields.Field> fieldList =
            new java.util.LinkedList<org.topcased.gpm.domain.fields.Field>();

    /**
     * 
     */
    @javax.persistence.OneToMany(cascade = { javax.persistence.CascadeType.ALL }, fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.fields.Field.class)
    @javax.persistence.JoinColumn(name = "MULTIPLE_FIELD_FK")
    @org.hibernate.annotations.IndexColumn(name = "MULTIPLE_FIELD_FIELDS_IDX")
    @org.hibernate.annotations.OrderBy(clause = "MULTIPLE_FIELD_FK")
    @org.hibernate.annotations.ForeignKey(name = "MULTIPLE_FIELD_FIELDS_FKC")
    public java.util.List<org.topcased.gpm.domain.fields.Field> getFields() {
        return this.fieldList;
    }

    public void setFields(
            java.util.List<org.topcased.gpm.domain.fields.Field> pFields) {
        this.fieldList = pFields;
    }

    /**
     * Add a org.topcased.gpm.domain.fields.Field.
     * 
     * @param pFields
     *            the entity to add.
     */
    public void addToFieldList(org.topcased.gpm.domain.fields.Field pFields) {
        if (this.fieldList == null) {
            this.fieldList =
                    new java.util.LinkedList<org.topcased.gpm.domain.fields.Field>();
        }
        this.fieldList.add(pFields);
    }

    /**
     * Remove a org.topcased.gpm.domain.fields.Field.
     * 
     * @param pFields
     *            the entity to remove.
     */
    public void removeFromFieldList(org.topcased.gpm.domain.fields.Field pFields) {
        if (this.fieldList != null) {
            this.fieldList.remove(pFields);
        }
    }

    /**
     * constructor
     */
    public MultipleField() {
        super();
        setFieldSeparator("-");
    }

    /**
     * 
     */
    @javax.persistence.Transient
    public java.util.Collection<org.topcased.gpm.domain.fields.Field> getSubfields() {
        final Collection<Field> lSubFields = getFields();
        if (lSubFields.size() == 0) {
            return getFields();
        }

        if (null == actualSubfields) {
            actualSubfields = new ArrayList<Field>(lSubFields.size());

            for (Field lField : lSubFields) {
                Field lActualField = IdentityFieldVisitor.getIdentity(lField);
                actualSubfields.add(lActualField);
            }
        }
        return actualSubfields;
    }

    /**
     * Returns <code>true</code> if the argument is an MultipleField instance
     * and all identifiers for this entity equal the identifiers of the argument
     * entity. The <code>equals</code> method of the parent entity will also
     * need to return <code>true</code>. Returns <code>false</code> otherwise.
     * 
     * @see org.topcased.gpm.domain.fields.Field#equals(Object)
     */
    @javax.persistence.Transient
    public boolean equals(Object pObject) {
        if (this == pObject) {
            return true;
        }
        if (!(pObject instanceof MultipleField)) {
            return false;
        }
        final MultipleField lMultipleField = (MultipleField) pObject;
        if (this.getId() == null || lMultipleField.getId() == null
                || !lMultipleField.getId().equals(getId())) {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers and the hash code
     * of the parent entity.
     * 
     * @return a hash code value for this object.
     * @see org.topcased.gpm.domain.fields.Field#hashCode()
     */
    @javax.persistence.Transient
    public int hashCode() {
        int lHashCode = super.hashCode();
        int lId = 0;
        if (id != null) {
            lId = id.hashCode();
        }
        lHashCode = HASHCODE_CONSTANT * lHashCode + lId;

        return lHashCode;
    }

    /**
     * Constructs new instances of
     * {@link org.topcased.gpm.domain.fields.MultipleField}.
     * 
     * @return a new instance of
     *         {@link org.topcased.gpm.domain.fields.MultipleField}
     */
    public static org.topcased.gpm.domain.fields.MultipleField newInstance() {
        return new org.topcased.gpm.domain.fields.MultipleField();
    }

    /**
     * {@inheritDoc}
     * 
     * @see org.topcased.gpm.domain.fields.FieldImpl#dummy()
     */
    @Transient
    public void dummy() {
        // Dummy method. No actual implementation.
    }
    // HibernateEntity.vsl merge-point
}