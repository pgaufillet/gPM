/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package org.topcased.gpm.domain.fields;

/**
 * @author Atos
 */

@javax.persistence.Entity
@javax.persistence.Table(name = "VALUES_CONTAINER")
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
@org.hibernate.annotations.Entity(dynamicInsert = false, dynamicUpdate = false)
@org.hibernate.annotations.Proxy(lazy = false)
public class ValuesContainer extends
        org.topcased.gpm.domain.attributes.AttributesContainer {
    private static final long serialVersionUID = 3525441532933570274L;

    protected int version;

    /**
     * <p>
     * Version of the container (incremented each time the container is
     * updated).
     * </p>
     */
    @javax.persistence.Column(name = "VERSION", nullable = false, unique = false)
    @org.hibernate.annotations.Type(type = "int")
    public int getVersion() {
        return this.version;
    }

    public void setVersion(int pVersion) {
        this.version = pVersion;
    }

    protected java.lang.String reference;

    /**
     * <p>
     * Cached value of the reference field.
     * </p>
     */
    @javax.persistence.Column(name = "REFERENCE", length = 100, unique = false)
    @org.hibernate.annotations.Index(name = "sheet_reference_idx")
    @org.hibernate.annotations.Type(type = "java.lang.String")
    public java.lang.String getReference() {
        return this.reference;
    }

    public void setReference(java.lang.String pReference) {
        this.reference = pReference;
    }

    protected org.topcased.gpm.domain.fields.FieldsContainer definition;

    /**
     * 
     */
    @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.fields.FieldsContainer.class)
    @javax.persistence.JoinColumn(nullable = false, name = "DEFINITION_FK")
    @org.hibernate.annotations.ForeignKey(name = "VALUES_CONTAINER_DEFINITION_FK")
    public org.topcased.gpm.domain.fields.FieldsContainer getDefinition() {
        return this.definition;
    }

    public void setDefinition(
            org.topcased.gpm.domain.fields.FieldsContainer pDefinition) {
        this.definition = pDefinition;
    }

    protected java.util.List<org.topcased.gpm.domain.dictionary.Environment> environmentList =
            new java.util.LinkedList<org.topcased.gpm.domain.dictionary.Environment>();

    /**
     * 
     */
    @javax.persistence.ManyToMany(fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.dictionary.Environment.class)
    @javax.persistence.JoinTable(name = "CONTAINER2ENV", joinColumns = @javax.persistence.JoinColumn(name = "VALUES_CONTAINERS_FK"), inverseJoinColumns = @javax.persistence.JoinColumn(name = "ENVIRONMENTS_FK"))
    @org.hibernate.annotations.IndexColumn(name = "env_idx")
    @org.hibernate.annotations.OrderBy(clause = "VALUES_CONTAINERS_FK")
    @org.hibernate.annotations.ForeignKey(inverseName = "ENVIRONMENT_VALUES_CONTAINERS_", name = "VALUES_CONTAINER_ENVIRONMENTS_")
    public java.util.List<org.topcased.gpm.domain.dictionary.Environment> getEnvironments() {
        return this.environmentList;
    }

    public void setEnvironments(
            java.util.List<org.topcased.gpm.domain.dictionary.Environment> pEnvironments) {
        this.environmentList = pEnvironments;
    }

    /**
     * Add a org.topcased.gpm.domain.dictionary.Environment.
     * 
     * @param pEnvironments
     *            the entity to add.
     */
    public void addToEnvironmentList(
            org.topcased.gpm.domain.dictionary.Environment pEnvironments) {
        if (this.environmentList == null) {
            this.environmentList =
                    new java.util.LinkedList<org.topcased.gpm.domain.dictionary.Environment>();
        }
        this.environmentList.add(pEnvironments);
    }

    /**
     * Remove a org.topcased.gpm.domain.dictionary.Environment.
     * 
     * @param pEnvironments
     *            the entity to remove.
     */
    public void removeFromEnvironmentList(
            org.topcased.gpm.domain.dictionary.Environment pEnvironments) {
        if (this.environmentList != null) {
            this.environmentList.remove(pEnvironments);
        }
    }

    protected java.util.Set<org.topcased.gpm.domain.link.Link> linkFromDestinationList =
            new java.util.LinkedHashSet<org.topcased.gpm.domain.link.Link>();

    /**
     * 
     */
    @javax.persistence.OneToMany(mappedBy = "destination", fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.link.Link.class)
    @org.hibernate.annotations.OrderBy(clause = "DESTINATION_FK")
    @org.hibernate.annotations.ForeignKey(name = "VALUES_CONTAINER_LINK_FROM_DES")
    public java.util.Set<org.topcased.gpm.domain.link.Link> getLinkFromDestination() {
        return this.linkFromDestinationList;
    }

    public void setLinkFromDestination(
            java.util.Set<org.topcased.gpm.domain.link.Link> pLinkFromDestination) {
        this.linkFromDestinationList = pLinkFromDestination;
    }

    /**
     * Add a org.topcased.gpm.domain.link.Link.
     * 
     * @param pLinkFromDestination
     *            the entity to add.
     */
    public void addToLinkFromDestinationList(
            org.topcased.gpm.domain.link.Link pLinkFromDestination) {
        if (this.linkFromDestinationList == null) {
            this.linkFromDestinationList =
                    new java.util.LinkedHashSet<org.topcased.gpm.domain.link.Link>();
        }
        this.linkFromDestinationList.add(pLinkFromDestination);
    }

    /**
     * Remove a org.topcased.gpm.domain.link.Link.
     * 
     * @param pLinkFromDestination
     *            the entity to remove.
     */
    public void removeFromLinkFromDestinationList(
            org.topcased.gpm.domain.link.Link pLinkFromDestination) {
        if (this.linkFromDestinationList != null) {
            this.linkFromDestinationList.remove(pLinkFromDestination);
        }
    }

    protected java.util.Set<org.topcased.gpm.domain.link.Link> linkFromOriginList =
            new java.util.LinkedHashSet<org.topcased.gpm.domain.link.Link>();

    /**
     * 
     */
    @javax.persistence.OneToMany(mappedBy = "origin", fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.link.Link.class)
    @org.hibernate.annotations.OrderBy(clause = "ORIGIN_FK")
    @org.hibernate.annotations.ForeignKey(name = "VALUES_CONTAINER_LINK_FROM_ORI")
    public java.util.Set<org.topcased.gpm.domain.link.Link> getLinkFromOrigin() {
        return this.linkFromOriginList;
    }

    public void setLinkFromOrigin(
            java.util.Set<org.topcased.gpm.domain.link.Link> pLinkFromOrigin) {
        this.linkFromOriginList = pLinkFromOrigin;
    }

    /**
     * Add a org.topcased.gpm.domain.link.Link.
     * 
     * @param pLinkFromOrigin
     *            the entity to add.
     */
    public void addToLinkFromOriginList(
            org.topcased.gpm.domain.link.Link pLinkFromOrigin) {
        if (this.linkFromOriginList == null) {
            this.linkFromOriginList =
                    new java.util.LinkedHashSet<org.topcased.gpm.domain.link.Link>();
        }
        this.linkFromOriginList.add(pLinkFromOrigin);
    }

    /**
     * Remove a org.topcased.gpm.domain.link.Link.
     * 
     * @param pLinkFromOrigin
     *            the entity to remove.
     */
    public void removeFromLinkFromOriginList(
            org.topcased.gpm.domain.link.Link pLinkFromOrigin) {
        if (this.linkFromOriginList != null) {
            this.linkFromOriginList.remove(pLinkFromOrigin);
        }
    }

    protected java.util.Set<org.topcased.gpm.domain.revision.Revision> revisionList =
            new java.util.LinkedHashSet<org.topcased.gpm.domain.revision.Revision>();

    /**
     * 
     */
    @javax.persistence.OneToMany(cascade = { javax.persistence.CascadeType.ALL }, fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.revision.Revision.class)
    @javax.persistence.JoinColumn(name = "VALUES_CONTAINER_FK")
    @org.hibernate.annotations.OrderBy(clause = "VALUES_CONTAINER_FK")
    @org.hibernate.annotations.ForeignKey(name = "VALUES_CONTAINER_REVISIONS_FKC")
    public java.util.Set<org.topcased.gpm.domain.revision.Revision> getRevisions() {
        return this.revisionList;
    }

    public void setRevisions(
            java.util.Set<org.topcased.gpm.domain.revision.Revision> pRevisions) {
        this.revisionList = pRevisions;
    }

    /**
     * Add a org.topcased.gpm.domain.revision.Revision.
     * 
     * @param pRevisions
     *            the entity to add.
     */
    public void addToRevisionList(
            org.topcased.gpm.domain.revision.Revision pRevisions) {
        if (this.revisionList == null) {
            this.revisionList =
                    new java.util.LinkedHashSet<org.topcased.gpm.domain.revision.Revision>();
        }
        this.revisionList.add(pRevisions);
    }

    /**
     * Remove a org.topcased.gpm.domain.revision.Revision.
     * 
     * @param pRevisions
     *            the entity to remove.
     */
    public void removeFromRevisionList(
            org.topcased.gpm.domain.revision.Revision pRevisions) {
        if (this.revisionList != null) {
            this.revisionList.remove(pRevisions);
        }
    }

    /**
     * <p>
     * Abstract method to get the product containing this element.
     * </p>
     */
    @javax.persistence.Transient
    public org.topcased.gpm.domain.product.Product getProduct() {
        return null;
    }

    /**
     * 
     */
    @javax.persistence.Transient
    public java.lang.String getFunctionalReference() {
        return getId();
    }

    /**
     * This entity does not have any identifiers but since it extends the
     * <code>org.topcased.gpm.domain.attributes.AttributesContainerImpl</code>
     * class it will simply delegate the call up there.
     * 
     * @see org.topcased.gpm.domain.attributes.AttributesContainer#equals(Object)
     */
    @javax.persistence.Transient
    public boolean equals(Object pObject) {
        return super.equals(pObject);
    }

    /**
     * This entity does not have any identifiers but since it extends the
     * <code>org.topcased.gpm.domain.attributes.AttributesContainerImpl</code>
     * class it will simply delegate the call up there.
     * 
     * @see org.topcased.gpm.domain.attributes.AttributesContainer#hashCode()
     */
    @javax.persistence.Transient
    public int hashCode() {
        return super.hashCode();
    }
}
