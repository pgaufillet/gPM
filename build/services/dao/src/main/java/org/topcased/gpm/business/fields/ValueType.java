/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Enumeration.vsl in andromda-java-cartridge.
//
package org.topcased.gpm.business.fields;

/**
 * @author Atos
 */
public class ValueType implements java.io.Serializable {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    /**
     * 
     */
    public static final ValueType BOOLEAN = new ValueType("BOOLEAN");

    /**
     * 
     */
    public static final ValueType INTEGER = new ValueType("INTEGER");

    /**
     * 
     */
    public static final ValueType REAL = new ValueType("REAL");

    /**
     * 
     */
    public static final ValueType STRING = new ValueType("STRING");

    /**
     * 
     */
    public static final ValueType DATE = new ValueType("DATE");

    private java.lang.String value;

    private ValueType(java.lang.String pValue) {
        this.value = pValue;
    }

    /**
     * The default constructor allowing super classes to access it.
     */
    protected ValueType() {
    }

    /**
     * Return the value
     * 
     * @return the value
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return value;
    }

    /**
     * Creates an instance of ValueType from <code>value</code>.
     * 
     * @param pValue
     *            the value to create the ValueType from.
     */
    public static ValueType fromString(java.lang.String pValue) {
        ValueType lTypeValue = (ValueType) VALUES.get(pValue);
        if (lTypeValue == null) {
            throw new IllegalArgumentException("invalid value '" + pValue
                    + "', possible values are: " + staticLiterals);
        }
        return lTypeValue;
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * 
     * @return the underlying value.
     */
    public java.lang.String getValue() {
        return this.value;
    }

    /**
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    public int compareTo(Object pObject) {
        return (this == pObject) ? 0 : this.getValue().compareTo(
                ((ValueType) pObject).getValue());
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by
     * this enumeration.
     * 
     * @return A List containing the actual literals defined by this
     *         enumeration, this list can not be modified.
     */
    @SuppressWarnings("rawtypes")
    public static java.util.List literals() {
        return staticLiterals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that
     * are known by this enumeration.
     * 
     * @return A List containing the actual names of the literals defined by
     *         this enumeration, this list can not be modified.
     */
    @SuppressWarnings("rawtypes")
    public static java.util.List names() {
        return staticNames;
    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object pObject) {
        return (this == pObject)
                || (pObject instanceof ValueType && ((ValueType) pObject).getValue().equals(
                        this.getValue()));
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode() {
        return this.getValue().hashCode();
    }

    private static final java.util.Map<String, ValueType> VALUES =
            new java.util.HashMap<String, ValueType>(5, 1);

    private static java.util.List<String> staticLiterals =
            new java.util.ArrayList<String>(5);

    private static java.util.List<String> staticNames =
            new java.util.ArrayList<String>(5);

    /**
     * Initializes the values.
     */
    static {
        VALUES.put(BOOLEAN.value, BOOLEAN);
        staticLiterals.add(BOOLEAN.value);
        staticNames.add("BOOLEAN");
        VALUES.put(INTEGER.value, INTEGER);
        staticLiterals.add(INTEGER.value);
        staticNames.add("INTEGER");
        VALUES.put(REAL.value, REAL);
        staticLiterals.add(REAL.value);
        staticNames.add("REAL");
        VALUES.put(STRING.value, STRING);
        staticLiterals.add(STRING.value);
        staticNames.add("STRING");
        VALUES.put(DATE.value, DATE);
        staticLiterals.add(DATE.value);
        staticNames.add("DATE");
        staticLiterals = java.util.Collections.unmodifiableList(staticLiterals);
        staticNames = java.util.Collections.unmodifiableList(staticNames);
    }
}