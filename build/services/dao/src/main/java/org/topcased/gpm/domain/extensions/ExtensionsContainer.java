/***************************************************************
 * Copyright (c) 2007 AIRBUS FRANCE. All rights reserved. This
 * program and the accompanying materials are made available
 * under the terms of the Lesser Gnu Public License (LGPL) which
 * accompanies this distribution, and is available
 * at http://www.gnu.org/licenses/lgpl.html
 *
 ******************************************************************/
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package org.topcased.gpm.domain.extensions;

/**
 * @author Atos
 */

@javax.persistence.Entity
@javax.persistence.Table(name = "EXTENSIONS_CONTAINER")
@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
@org.hibernate.annotations.Entity(dynamicInsert = false, dynamicUpdate = false)
@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE)
public class ExtensionsContainer extends
        org.topcased.gpm.domain.attributes.AttributesContainer {
    private static final long serialVersionUID = -755080969056311265L;

    protected java.lang.String id;

    /**
     * 
     */
    protected org.topcased.gpm.domain.businessProcess.BusinessProcess businessProcess;

    /**
     * 
     */
    @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.businessProcess.BusinessProcess.class)
    @javax.persistence.JoinColumn(name = "BUSINESS_PROCESS_FK")
    @org.hibernate.annotations.ForeignKey(name = "EXTENSIONS_CONTAINER_BUSINESS_")
    public org.topcased.gpm.domain.businessProcess.BusinessProcess getBusinessProcess() {
        return this.businessProcess;
    }

    public void setBusinessProcess(
            org.topcased.gpm.domain.businessProcess.BusinessProcess pBusinessProcess) {
        this.businessProcess = pBusinessProcess;
    }

    protected java.util.Set<org.topcased.gpm.domain.extensions.ExtensionPoint> extensionPointList =
            new java.util.LinkedHashSet<org.topcased.gpm.domain.extensions.ExtensionPoint>();

    /**
     * 
     */
    @javax.persistence.OneToMany(cascade = { javax.persistence.CascadeType.ALL }, fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.extensions.ExtensionPoint.class)
    @javax.persistence.JoinColumn(name = "EXTENSIONS_CONTAINER_FK")
    @org.hibernate.annotations.OrderBy(clause = "EXTENSIONS_CONTAINER_FK")
    @org.hibernate.annotations.ForeignKey(name = "EXTENSIONS_CONTAINER_EXTENSION")
    public java.util.Set<org.topcased.gpm.domain.extensions.ExtensionPoint> getExtensionPoints() {
        return this.extensionPointList;
    }

    public void setExtensionPoints(
            java.util.Set<org.topcased.gpm.domain.extensions.ExtensionPoint> pExtensionPoints) {
        this.extensionPointList = pExtensionPoints;
    }

    /**
     * Add a org.topcased.gpm.domain.extensions.ExtensionPoint.
     * 
     * @param pExtensionPoints
     *            the entity to add.
     */
    public void addToExtensionPointList(
            org.topcased.gpm.domain.extensions.ExtensionPoint pExtensionPoints) {
        if (this.extensionPointList == null) {
            this.extensionPointList =
                    new java.util.LinkedHashSet<org.topcased.gpm.domain.extensions.ExtensionPoint>();
        }
        this.extensionPointList.add(pExtensionPoints);
    }

    /**
     * Remove a org.topcased.gpm.domain.extensions.ExtensionPoint.
     * 
     * @param pExtensionPoints
     *            the entity to remove.
     */
    public void removeFromExtensionPointList(
            org.topcased.gpm.domain.extensions.ExtensionPoint pExtensionPoints) {
        if (this.extensionPointList != null) {
            this.extensionPointList.remove(pExtensionPoints);
        }
    }

    protected java.util.Set<org.topcased.gpm.domain.extensions.ExtendedAction> extendedActionList =
            new java.util.LinkedHashSet<org.topcased.gpm.domain.extensions.ExtendedAction>();

    /**
     * 
     */
    @javax.persistence.OneToMany(mappedBy = "extensionsContainer", fetch = javax.persistence.FetchType.LAZY, targetEntity = org.topcased.gpm.domain.extensions.ExtendedAction.class)
    @org.hibernate.annotations.OrderBy(clause = "EXTENSIONS_CONTAINER_FK")
    @org.hibernate.annotations.ForeignKey(name = "EXTENSIONS_CONTAINER_EXTENDED_")
    public java.util.Set<org.topcased.gpm.domain.extensions.ExtendedAction> getExtendedActions() {
        return this.extendedActionList;
    }

    public void setExtendedActions(
            java.util.Set<org.topcased.gpm.domain.extensions.ExtendedAction> pExtendedActions) {
        this.extendedActionList = pExtendedActions;
    }

    /**
     * Add a org.topcased.gpm.domain.extensions.ExtendedAction.
     * 
     * @param pExtendedActions
     *            the entity to add.
     */
    public void addToExtendedActionList(
            org.topcased.gpm.domain.extensions.ExtendedAction pExtendedActions) {
        if (this.extendedActionList == null) {
            this.extendedActionList =
                    new java.util.LinkedHashSet<org.topcased.gpm.domain.extensions.ExtendedAction>();
        }
        this.extendedActionList.add(pExtendedActions);
    }

    /**
     * Remove a org.topcased.gpm.domain.extensions.ExtendedAction.
     * 
     * @param pExtendedActions
     *            the entity to remove.
     */
    public void removeFromExtendedActionList(
            org.topcased.gpm.domain.extensions.ExtendedAction pExtendedActions) {
        if (this.extendedActionList != null) {
            this.extendedActionList.remove(pExtendedActions);
        }
    }

    /**
     * 
     */
    @javax.persistence.Transient
    public void dummy() {
        // Dummy method. No actual implementation.
    }

    /**
     * Returns <code>true</code> if the argument is an ExtensionsContainer
     * instance and all identifiers for this entity equal the identifiers of the
     * argument entity. The <code>equals</code> method of the parent entity will
     * also need to return <code>true</code>. Returns <code>false</code>
     * otherwise.
     * 
     * @see org.topcased.gpm.domain.attributes.AttributesContainer#equals(Object)
     */
    @javax.persistence.Transient
    public boolean equals(Object pObject) {
        if (this == pObject) {
            return true;
        }
        if (!(pObject instanceof ExtensionsContainer)) {
            return false;
        }
        final ExtensionsContainer lExtensionsContainer =
                (ExtensionsContainer) pObject;
        if (this.getId() == null || lExtensionsContainer.getId() == null
                || !lExtensionsContainer.getId().equals(getId())) {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers and the hash code
     * of the parent entity.
     * 
     * @return a hash code value for this object.
     * @see org.topcased.gpm.domain.attributes.AttributesContainer#hashCode()
     */
    @javax.persistence.Transient
    public int hashCode() {
        int lHashCode = super.hashCode();
        int lId = 0;
        if (id != null) {
            lId = id.hashCode();
        }
        lHashCode = HASHCODE_CONSTANT * lHashCode + lId;

        return lHashCode;
    }

    /**
     * Constructs new instances of
     * {@link org.topcased.gpm.domain.extensions.ExtensionsContainer}.
     * 
     * @return a new instance of
     *         {@link org.topcased.gpm.domain.extensions.ExtensionsContainer}
     */
    public static org.topcased.gpm.domain.extensions.ExtensionsContainer newInstance() {
        return new org.topcased.gpm.domain.extensions.ExtensionsContainer();
    }

    // HibernateEntity.vsl merge-point
}